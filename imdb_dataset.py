# -*- coding: utf-8 -*-
"""IMDB dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CYwD45eGjgVjEolrghRXLKRQsBcZclDj
"""

import pandas as pd
import nltk
import re 
from nltk.corpus import stopwords

nltk.download("stopwords")

df = pd.read_csv("IMDB dataset.csv")

df.head()

df

#df['label'] = df['label'].replace([0],"Negative")
#df["label"] = df["label"].replace([1],"Pozitive")

# df

df.isnull().sum()

X = df["text"]
y = df["label"]

X

messages = X.copy()

messages[1]

len(messages)

from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

corpus = []

for i in range(0,len(messages)):
  review = re.sub("[^a-zA-Z]"," ",messages[i])
  review = review.lower()
  review = review.split()

  review  = [ps.stem(word) for word in review if not word in stopwords.words("english")]
  review = " ".join(review)
  corpus.append(review)

corpus

X.shape

y.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 101)



X_train.shape

y_train.shape

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(stop_words="english")

tfidf.fit(X_train)

X_train_tfidf = tfidf.transform(X_train)

X_test_tfidf = tfidf.transform(X_test)

X_train_tfidf

X_train_tfidf.shape

from sklearn.naive_bayes import MultinomialNB

nb = MultinomialNB()

nb.fit(X_train_tfidf,y_train)

from sklearn.linear_model import LogisticRegression
log_model = LogisticRegression()
log_model.fit(X_train_tfidf,y_train)

from sklearn.svm import SVC,LinearSVC
rbf_svc = SVC()
rbf_svc.fit(X_train_tfidf,y_train)

linear_svc = LinearSVC()
linear_svc.fit(X_train_tfidf,y_train)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
rfc.fit(X_train_tfidf,y_train)

from sklearn.metrics import accuracy_score,plot_confusion_matrix,classification_report

def report(model):
  preds = model.predict(X_test_tfidf)
  print(accuracy_score(y_test,preds))
  print(classification_report(y_test,preds))
  print(plot_confusion_matrix(model,X_test_tfidf,y_test))

report(nb)

report(log_model)

report(rbf_svc)

report(linear_svc)

report(rfc)



from sklearn.pipeline import Pipeline

pipe = Pipeline([("tfidf",TfidfVectorizer()),
                ('linear_svc',LinearSVC())])

pipe.fit(X,y)

pipe.predict(["BAD PİZZA"]) # NEGATİVE

pipe.predict(["BAD PİZZA"]) # NEGATİVE

pipe.predict(["I am Like to pizza and not like to Burger"])

pipe.predict(["I am hungry"])

pipe.predict(["I'm a second year student in Elazig, I'm studying software engineering, I love the profession, but I need to work harder."])

pipe.predict(["At first I loved Anaconda IDE, but now I don't use anaconda because I'm learning new IDEs and I don't like it."])

"""DEEP LEARNİNG """

